{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MA8DeA,MA5Df,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD9C,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIb,OACI,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SACDtB,EAAME,KACL,qCACE,uBACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,wBAAQK,QAASb,EAAcQ,UAAU,mBAAzC,uBAKF,qCACE,uBACEC,YAAY,aACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,4B,eCbKM,EAnCF,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAAgB,EACpC/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAHiD,mBACrDD,EADqD,KAC/C+B,EAD+C,KAc5D,OAAG/B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACJhB,GAAI,KACJd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACT,sBAAKd,UAAWa,EAAKE,WAAa,oBAAqB,WAAvD,UAEI,qBAAqBV,QAAS,kBAAMG,EAAaK,EAAKlB,KAAtD,SACKkB,EAAKd,MADEc,EAAKlB,IAGjB,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CAAmBK,QAAS,kBAAMI,EAAWI,EAAKlB,KAClDK,UAAU,gBACV,cAAC,IAAD,CAAQK,QAAS,kBAAMM,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QACtDC,UAAY,mBARfc,OC+BNE,MApDf,WAAqB,IAAD,EAEUrC,mBAAS,IAFnB,mBAET4B,EAFS,KAEFU,EAFE,KAuChB,OACI,qCACI,4DACA,cAAC,EAAD,CAAUvB,SAtCF,SAAAmB,GACZ,GAAIA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAAnC,CAIA,IAAMoB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OAgCL,cAAC,EAAD,CAAMZ,MAAOA,EACTC,aAfS,SAAAb,GACjB,IAAIyB,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IASDX,WAvBO,SAAAd,GACf,IAAM0B,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKlB,KAAOA,KAExDsB,EAASI,IAqBDX,WAhCO,SAACa,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAIA,EAAK/B,KAAO4B,EAASC,EAASE,e,MCXzDC,MARf,WACI,OACI,qBAAK3B,UAAU,WAAf,SACI,cAAC,EAAD,OCFZ4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a133b88a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    };\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add a todo'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nconst Todo = ({todos, completeTodo, removeTodo, updateTodo}) => {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n            <div className={todo.isComplete ? 'todo-row complete': 'todo-row'} \r\n                key={index}>\r\n                <div key = {todo.id} onClick={() => completeTodo(todo.id)}>\r\n                    {todo.text}\r\n                </div>\r\n                <div className=\"icons\">\r\n                    <RiCloseCircleLine onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon' />\r\n                    <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                        className = 'edit-icon'\r\n                    />\r\n                </div>\r\n            </div>\r\n        ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo'\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos)\r\n    };\r\n    \r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item =>(item.id === todoId ? newValue:item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    };\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit = {addTodo}/>\r\n            <Todo todos={todos} \r\n                completeTodo={completeTodo} \r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport TodoList from './components/TodoList';\r\nimport './App.css';\r\n\r\nfunction App(){\r\n    return (\r\n        <div className='todo-app'>\r\n            <TodoList /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}